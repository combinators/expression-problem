1. Generate all evolutions for all approaches. Within java\Main.scala or codegen\Main.scala you can
   generate all files. The output directories are "ep-scala-XXX" for Scala generated code or "ep-java-XXX"
   for Java-generated code.

   ep-java (GenerateAllMain)
     * System: system-main.json
     * Approaches: graphviz oo visitor visitorSideEffect extensibleVisitor interpreter coco trivially dispatch algebra
     * Evolutions: M0 M1 M2 M3 M4 M5 M6 M7 M7I2 M8 M9 I1 A1 A1M3 A1M3I2 A3 I2 O1 O2 OA O1OA OD1 OD2 OD3 OO1 OO2 OO3

   ep-java-j (GenerateAllJ)
      * System: system-j.json
      * Approaches: graphviz oo visitor visitorSideEffect extensibleVisitor interpreter coco trivially dispatch algebra
      * Evolutions: M0 J1 J2 J3 K1 K2 J4 J5 J6 K2J6 J7 J8

   p-java-d1d2 (GenerateAllD1D2)
      * Approaches: graphviz oo visitor visitorSideEffect extensibleVisitor interpreter coco trivially dispatch algebra
      * Evolutions: M0 M1 D1 D2 D1D2 D3

   ep-java-merging (GenerateAllMerging)
      * Approaches: graphviz oo visitor visitorSideEffect extensibleVisitor interpreter coco trivially dispatch algebra
      * Evolutions: M0 M1 M2 I1 I2 N1 M2_ABS M3 M3I1 I2M3I1N1

   ep-java-producer (GenerateAllExtended)
      * Approaches: graphviz oo visitor visitorSideEffect extensibleVisitor interpreter coco trivially dispatch algebra
      * Evolutions: M0 M1 M2 M3 W1 M3W1 Q1 C2 V1

   ep-java-third-alternate (GenerateAllThirdAlternate)
      * Approaches: graphviz oo visitor visitorSideEffect extensibleVisitor interpreter coco trivially dispatch algebra
      * Evolutions: M0 X1 X2 X3 X2X3 X4

   For Scala-generated code, the above are replaced with "ep-scala-XXX" and approaches and evolutions remain the same.

   Note: you can generate all of these from the command line where the 'build.sbt' file exists
   by typing "sbt language-java/run" (takes about 45 minutes to generate all stages and
   all systems and over 500K LOC including test cases) or "sbt language-newScala/run" (takes
   about 50 minutes to generate all stages and all systems and over 600K LOC including test cases)

2. Produce full report to validate which AIPs are truly correct

  c:\Python37\python.exe ..\..\scripts\compare.py ..\..\scripts\systems\[EVOLUTION-JSON] >> REPORT

     OR

  python3 ../../scripts/compare.py ../../scripts/systems/[EVOLUTION-JSON] >> REPORT

  Example EVOLUTION-JSON files are "system-j.json" or "system-main.json"

  If you are comparing 'scala' generated code, be sure to add 'scala' as the final argument

  Note that the JSON files look like the following and contain predecessor information for each EIP to
  make the Python processing a bit easier.

         {
           "evolutions" : [
             { "J1" : ["M0"] },
             { "J2" : ["J1"] },
             ...
          }

  This script assesses whether an approach minimally satisfies the Expression Problem. That is, future evolutions
  do not require any changes to former artifacts.

  This script must be run in the directory that was generated by the above BAT scripts.

  Note that it does not identify situations where, for example, non-trivial code is copied and used in a subsequent
  evolution. For example, the 'interpreter' approach requires code to be copies with producer operations.

     // Within original M4 evolution
     // ------------------------------
     public Exp simplify() {
            if ((Double.valueOf(((Exp) this.left).eval()).equals(0.0) || Double.valueOf(((Exp) this.right).eval()).equals(0.0))) {
                return new Lit(0.0);
            } else if (Double.valueOf(((Exp) this.left).eval()).equals(1.0)) {
                return ((Exp) this.right).simplify();
            } else if (Double.valueOf(((Exp) this.right).eval()).equals(1.0)) {
                return ((Exp) this.left).simplify();
            } else {
                return new ep.m4.Mult(((Exp) this.left).simplify(), ((Exp) this.right).simplify());
            }
        }

     // Within original M7I2 evolution
     // ------------------------------
     public Exp simplify() {
         if ((Double.valueOf(((Exp) this.left).eval()).equals(0.0) || Double.valueOf(((Exp) this.right).eval()).equals(0.0))) {
             return new Lit(0.0);
         } else if (Double.valueOf(((Exp) this.left).eval()).equals(1.0)) {
             return ((Exp) this.right).simplify();
         } else if (Double.valueOf(((Exp) this.right).eval()).equals(1.0)) {
             return ((Exp) this.left).simplify();
         } else {
             return new ep.m7i2.Mult(((Exp) this.left).simplify(), ((Exp) this.right).simplify());
         }
     }

3. Compile and run tests cases to generate jacoco.* code coverage reports.

  In the respective ep-java-XXX directories, execute the following Python script:

     c:\Python37\python.exe ..\..\scripts\compile-java.py

        OR

     python3 ../../scripts/compile-java.py

  In the respective ep-scala-XXX directories, execute the following Python script:

     c:\Python37\python.exe ..\..\scripts\compile-scala.py

        OR

     python3 ../../scripts/compile-scala.py

   Note: The length of the compilation time depends on the complexity of the Extension Graph
   for the chosen system. Be prepared for this process to take about 30-45 minutes. Information
   about the compilation and testing process is stored in created jacoco.* files, one per approach.

4. Generate statistics regarding the results of generating the source code, compiling the
   source code, executing the test cases and code coverage statistics. This script also detects
   errors in these three phases.

   In the respective ep-java-XXX directories, execute the following Python script:

     c:\Python37\python.exe ..\..\scripts\process-java.py > STATISTICS

        OR

     python3 ../../scripts/process-java.py > STATISTICS

   In the respective ep-scala-XXX directories, execute the following Python script:

     c:\Python37\python.exe ..\..\scripts\process-scala.py > STATISTICS

        OR

     python3 ../../scripts/process-scala.py > STATISTICS

5. When all scripts have run, you may need to delete temporary directories inside of target/bg-jobs that were created
   by SBT (but not deleted). A full run of the scripts often results in several GB worth of directories.
