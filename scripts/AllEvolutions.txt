D1 = M1.getModel.evolve("d1", Seq.empty, Seq(MultBy))
D2 = M1.getModel.evolve("d2", Seq(Mult), Seq.empty)
D1D2 = D1.getModel.merge("d1d2", Seq.empty, Seq.empty, Seq(D2.getModel))
D3 = D1D2.getModel.evolve("d3", Seq.empty, Seq(PrettyP))

I1 = M2.getModel.evolve("i1", Seq.empty, Seq(MultBy))
I2 = I1.getModel.evolve("i2", Seq(Power), Seq.empty)
J1 = M0.getModel.evolve("j1", Seq(Sub), Seq(MultBy))
J2 = J1.getModel.evolve("j2", Seq(Mult), Seq(Eql) ++ isOps(allTypes))
J3 = J2.getModel.evolve("j3", Seq(Neg, Divd), Seq(PrettyP) ++ J2.isOps(Seq(Neg, Divd)))
J4 = J3.getModel.evolve("j4", Seq.empty, Seq(Operation.asTree, Identifier))
J5 = J4.getModel.evolve("j5", Seq.empty, Seq(Equals))
J6 = J5.getModel.evolve("j6", Seq.empty, Seq(PowBy))

K2J6 = J6.getModel.merge("k2j6", Seq.empty, Seq.empty, Seq(K2.getModel))
J7 = K2J6.getModel.evolve("j7", Seq(Inv), J2.isOps(Seq(Inv)))
J8 = J7.getModel.evolve("j8", Seq.empty, Seq(Height))

K1 = J2.getModel.evolve("k1", Seq(Power), J2.isOps(Seq(Power)))
K2 = K1.getModel.evolve("k2", Seq.empty, Seq(Simplify, Collect))

X1 = M0.getModel.evolve("x1", Seq(Sub), Seq(PrettyP, MultBy))
X2 = X1.getModel.evolve("x2", Seq(Times), Seq.empty)
X3 = X1.getModel.evolve("x3", Seq(Divd), Seq.empty)
X2X3 = X2.getModel.extend("x2x3", Seq(X3.getModel))
X4 = X2X3.getModel.evolve("x4", Seq(Neg), Seq.empty)

A1 = I1.getModel.evolve("a1", Seq(Times), Seq.empty)
A1M3 = M3.getModel.extend("a1m3", Seq(A1.getModel))
A3M3I2 = A1M3.getModel.extend("a1m3i2", Seq(I2.getModel))
A3 = A1M3I2.getModel.evolve("a3", Seq(Inv), Seq.empty)
C2 = Q1.getModel.evolve("c2", Seq.empty, Seq(Collect))
I2M3I1N1 = M3I1.getModel.extend("i2m3i1n1", Seq(I2.getModel, N1.getModel))

M0 = MathDomain.baseModel.evolve("m0", Seq(Lit, Add), Seq(Eval))
M1 = M0.getModel.evolve("m1", Seq(Sub), Seq.empty)
M2 = M1.getModel.evolve("m2", Seq.empty, Seq(PrettyP))
M2_ABS = M2.getModel.evolve("m2_abs", Seq(Abs), Seq.empty)
M3 = M2.getModel.evolve("m3", Seq(Neg, Mult, Divd), Seq.empty)
M3I1 = M3.getModel.extend("m3i1", Seq(I1.getModel))
M3W1 =  M3.getModel.extend("m3w1", Seq(W1.getModel))
M4 = M3.getModel.evolve("m4", Seq.empty, Seq(Simplify, Collect))
M5 = M4.getModel.evolve("m5", Seq.empty, Seq(Operation.asTree, Identifier))
M6 = M5.getModel.evolve("m6", Seq.empty, Seq(Equals,Eql) ++ isOps(allTypes))
M7 = M6.getModel.evolve("m7", Seq.empty, Seq(PowBy))
M7I2 = M7.getModel.merge("m7i2", Seq.empty, M6.isOps(Seq(I2.Power)), Seq(I2.getModel))
M8 = M7I2.getModel.evolve("m8", Seq(Inv), M6.isOps(Seq(Inv)))
M9 = M8.getModel.evolve("m9", Seq.empty, Seq(Height))

N1 = M3.getModel.evolve("n1", Seq.empty, Seq(PowBy))
P1 = M2.getModel.evolve("p1", Seq(Pi, Rnd, Amortized), Seq(CountBetween, Output, ParamHeight))
Q1 = M3W1.getModel.evolve("q1", Seq(Sqrt), Seq(Operation.asTree, Identifier))
V1 = C2.getModel.evolve("v1", Seq(Inv), Seq.empty)
W1 = M1.getModel.evolve("w1", Seq(Power), Seq.empty)